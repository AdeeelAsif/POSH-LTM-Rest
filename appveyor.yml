# Set your PowerShellGallery API Key to facilitate publishing
#environment:
#    POWERSHELLGALLERY_APIKEY:
#        # Don't store your API Key in the clear, encrypt it: https://ci.appveyor.com/tools/encrypt
#        secure: [TBD]

# Skip on updates to the readme.
# [skip ci] or [ci skip] anywhere in commit message will also prevent a ci build 
skip_commits:
    message: /update readme.*/
  
build: false
os: WMF 5
version: 1.3.{build}

install:
  - ps: Get-PackageProvider -Name NuGet -Force
# Install pester PowerShell Unit Testing module
#    - cinst -y pester

# Dynamically set FunctionsToExport in F5-LTM.psd1
# Fixes #37 Do not export Private\*.ps1 functions
before_test:
    - ps: |
        $msiPath = "$($env:USERPROFILE)\PackageManagement_x64.msi"
        (New-Object Net.WebClient).DownloadFile('https://download.microsoft.com/download/4/1/A/41A369FA-AA36-4EE9-845B-20BCC1691FC5/PackageManagement_x64.msi', $msiPath)
        cmd /c start /wait msiexec /i $msiPath /quiet
    - ps: |
        $FunctionsToExport = ((Get-ChildItem (Join-Path $env:APPVEYOR_BUILD_FOLDER Public) -Filter *.ps1 -Recurse).BaseName) -join ','
        (Get-Content (Join-Path $env:APPVEYOR_BUILD_FOLDER F5-LTM.psd1) -Raw) -replace 
            "FunctionsToExport = '.*'","FunctionsToExport = '$FunctionsToExport'" -replace 
            "ModuleVersion = '.*'", "ModuleVersion = '$env:APPVEYOR_BUILD_VERSION'" | 
            Set-Content (Join-Path $env:APPVEYOR_BUILD_FOLDER F5-LTM.psd1)
        
test_script:
# Install PSScriptAnalyzer module for enforcing best practices
    - ps: Install-Module -Name PSScriptAnalyzer -Force
# Invoke PSScriptAnalyzer against the module to make sure it's not failing any tests
    - ps: Invoke-ScriptAnalyzer -Path $env:APPVEYOR_BUILD_FOLDER
# Invoke-Pester unit tests
#   - ps: |
#       $testResultsFile = '.\TestsResults.xml'
#        
#       # run tests
#       $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
#        
#       # upload results to AppVeyor
#       (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
#        
#       # if failures, quit to prevent publish
#       if ($res.FailedCount -gt 0) { 
#           throw "$($res.FailedCount) tests failed."
#       }

# to run your custom scripts instead of provider deployments
#deploy_script:
#  - ps: Publish-Module -NugetApiKey $env:POWERSHELLGALLERY_APIKEY -Path $env:APPVEYOR_BUILD_FOLDER -ProjectUri 'https://github.com/joel74/POSH-LTM-Rest' Tags @('F5', 'LTM', 'REST', 'API')
after_test:
    - cmd: 7z a F5-LTM.%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\
# This will be redundant once Publish-Module is implemented.  But should zip everything up as a single appveyor artifact in the meantime
artifacts:
  - path: *.zip